# .github/workflows/build-from-azdo.yml

name: Build from Azure DevOps Repo

on:
  workflow_dispatch: # Allows you to run this workflow manually from the Actions tab

env:
  # Variables from your Azure DevOps pipeline
  SOLUTION: '**/*.sln'
  BUILD_PLATFORM: 'Any CPU'
  BUILD_CONFIGURATION: 'Release'
  AZDO_ORG: 'punitsinc'
  AZDO_PROJECT: 'PartsUnlimited'
  AZDO_REPO: 'PartsUnlimited'

  # Variables for Azure Artifacts
  AZURE_FEED_NAME: 'PartsUnlimitedFeed' # <-- The name of your feed in Azure Artifacts
  PACKAGE_NAME: 'PartsUnlimited-Build' # <-- A name for your package, e.g., 'website-build'
  
jobs:
  # This is a single job. All steps inside it run sequentially.
  build-and-publish:
    runs-on: windows-latest
    steps:
    # Step 1: Clones the repo. The next step won't start until this is done.
    - name: Clone Azure DevOps Repo
      run: |
        git clone https://${{ env.AZDO_ORG }}:${{ secrets.AZDO_PAT }}@dev.azure.com/${{ env.AZDO_ORG }}/${{ env.AZDO_PROJECT }}/_git/${{ env.AZDO_REPO }}
      shell: pwsh

    # Step 2: Sets up MSBuild.
    - name: Set up MSBuild
      uses: microsoft/setup-msbuild@v1.1

    # Step 3: Sets up NuGet.
    - name: Set up NuGet
      uses: NuGet/setup-nuget@v1
      with:
        nuget-version: '5.x'

    # Step 4: Restores packages.
    - name: Restore NuGet packages
      working-directory: ./${{ env.AZDO_REPO }}
      run: nuget restore ${{ env.SOLUTION }}

    # Step 5: Builds the solution.
    - name: Build solution
      working-directory: ./${{ env.AZDO_REPO }}
      run: |
        msbuild.exe ${{ env.SOLUTION }} /p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:PackageLocation="${{ github.workspace }}/artifact" /p:Platform="${{ env.BUILD_PLATFORM }}" /p:Configuration="${{ env.BUILD_CONFIGURATION }}"

    # Step 6: Copies extra files.
    - name: Copy JSON files to artifact directory
      working-directory: ./${{ env.AZDO_REPO }}
      run: Copy-Item -Path '**/*.json' -Destination '${{ github.workspace }}/artifact' -Recurse -Force
      shell: pwsh

    - name: Install Azure DevOps extension for Azure CLI
      run: az extension add --name azure-devops
      shell: pwsh

    - name: Publish Artifacts to Azure DevOps via Azure CLI
      run: |
        az artifacts universal publish `
          --organization "https://dev.azure.com/${{ env.AZDO_ORG }}" `
          --project "${{ env.AZDO_PROJECT }}" `
          --scope project `
          --feed "${{ env.AZURE_FEED_NAME }}" `
          --name "${{ env.PACKAGE_NAME }}" `
          --version "1.0.${{ github.run_number }}" `
          --path "${{ github.workspace }}/artifact" `
          --description "Build artifact from GitHub Actions run ${{ github.run_id }}"
      shell: pwsh
      env:
        # The Azure DevOps PAT is used by the Azure CLI for authentication
        AZURE_DEVOPS_EXT_PAT: ${{ secrets.AZDO_PAT }}
